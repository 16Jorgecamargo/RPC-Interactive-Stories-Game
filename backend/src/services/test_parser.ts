import { readFileSync } from 'fs';
import { join } from 'path';
import { parseMermaidToStory } from './mermaid_parser.js';

const storyPath = join(process.cwd(), 'stories', 'caverna-misteriosa.mmd');

try {
  console.log('üîç Lendo arquivo Mermaid...');
  const mermaidCode = readFileSync(storyPath, 'utf-8');

  console.log('\nüìñ Conte√∫do do arquivo:');
  console.log('‚îÄ'.repeat(80));
  console.log(mermaidCode);
  console.log('‚îÄ'.repeat(80));

  console.log('\n‚öôÔ∏è  Fazendo parse...');
  const parsedStory = parseMermaidToStory(mermaidCode);

  console.log('\n‚úÖ Parse conclu√≠do com sucesso!');
  console.log(`\nüìä Estat√≠sticas:`);
  console.log(`  - Cap√≠tulo inicial: ${parsedStory.initialChapter}`);
  console.log(`  - Total de cap√≠tulos: ${Object.keys(parsedStory.capitulos).length}`);

  const combatChapters = Object.entries(parsedStory.capitulos).filter(([_, cap]) => cap.isCombat);
  console.log(`  - Cap√≠tulos de combate: ${combatChapters.length}`);

  console.log('\nüìö Cap√≠tulos detalhados:\n');

  for (const [id, capitulo] of Object.entries(parsedStory.capitulos)) {
    console.log(`  ${id}:`);
    console.log(`    Tipo: ${capitulo.isCombat ? '‚öîÔ∏è  COMBATE' : 'üìú Narrativa'}`);
    console.log(`    Texto: ${capitulo.texto.substring(0, 80)}${capitulo.texto.length > 80 ? '...' : ''}`);

    if (capitulo.opcoes && capitulo.opcoes.length > 0) {
      console.log(`    Op√ß√µes (${capitulo.opcoes.length}):`);
      capitulo.opcoes.forEach(op => {
        console.log(`      - [${op.id}] "${op.texto}" ‚Üí ${op.proximo}`);
      });
    } else {
      console.log(`    Op√ß√µes: (nenhuma - cap√≠tulo final)`);
    }
    console.log('');
  }

  console.log('\nüéØ Estrutura JSON final:');
  console.log(JSON.stringify(parsedStory, null, 2));

  console.log('\n‚úÖ Teste conclu√≠do com sucesso!');
} catch (error) {
  console.error('\n‚ùå Erro ao fazer parse do arquivo:');
  console.error(error);
  process.exit(1);
}
